class Scoreboard
{
  int stability;
  int runScore;
  boolean gameStat;
  int highestScore;


//////////////////////////////////////////////////////////////////////////////    
//Scoreboard Constructor  
//////////////////////////////////////////////////////////////////////////////    
   Scoreboard()
   {
    stability = 100; 
    gameStat = true;
    highestScore = 0;
   }
//////////////////////////////////////////////////////////////////////////////  
   

//////////////////////////////////////////////////////////////////////////////  
//scoreTally: Removes stability points based on the Collision Tracker hit report   
//////////////////////////////////////////////////////////////////////////////  
void scoreTally(boolean hitReport)
   {      
     boolean hit = hitReport;
     
     if(hit)
     {
       stability = stability - 10;
     }
    runScore = runScore + 1; 
   }
//////////////////////////////////////////////////////////////////////////////  
  

//////////////////////////////////////////////////////////////////////////////  
//runGameOver: When run, shows the game over screen with total and restart instruction.
//////////////////////////////////////////////////////////////////////////////    
void runGameOver()
 {
  background(255);
  
  textSize(16);
  fill(0);
  text("GAME OVER", 200, 200); 
  text("Total:  " + runScore, 150, 250); 
  textSize(12);
  text("Press ENTER/RETURN to Start new game", 10, 485);  
  
  if(runScore != 0)
  {
    if(runScore > highestScore)
    {
    highestScore = runScore;
    }
    text("Highest Score: " + highestScore, 150, 270);
  }
 } 
//////////////////////////////////////////////////////////////////////////////  
   
 
//////////////////////////////////////////////////////////////////////////////   
//display: Top right-hand corner score keeper   
//////////////////////////////////////////////////////////////////////////////    
void display()
{
     
textSize(16);
fill(255);
text("Score: ", 200, 30); 
text(runScore, 250, 30);
text("Stability", 350, 30);
text(stability, 450, 30);
}
//////////////////////////////////////////////////////////////////////////////  


//////////////////////////////////////////////////////////////////////////////  
//gameStatus: Determines is the game is over and sends info to main patch
//////////////////////////////////////////////////////////////////////////////  
boolean gameStatus()
{
 if(stability <= 0)
 {
  gameStat = false;
  return gameStat;  
 }
 else
 {
 gameStat = true;
 return gameStat; 
 }
} //Ends gameStatus
//////////////////////////////////////////////////////////////////////////////  


//////////////////////////////////////////////////////////////////////////////  
//gameReset: Resets the score
//////////////////////////////////////////////////////////////////////////////  
void gameReset()
{  
  stability = 100;
  runScore = 0; 
}
//////////////////////////////////////////////////////////////////////////////  
  
}//End Class
   
   
