class Attacker
{
  
  float x;
  float y;
  float aSize = 10;
  float aRadi = aSize/2;
  float speedX;
  float speedY;
  boolean aFortState;
  boolean aDefState;
  float fortRadius;
  int aMotion = 0;
  
  
  
//////////////////////////////////////////////////////////////////////////////    
//Attacker Constructor  
//////////////////////////////////////////////////////////////////////////////  
  Attacker(float fRadi)
  {
   fortRadius = fRadi;
    
   x = (int)random(0, 200);
   y = (int)random(0, 200);
   
  speedX = random(2, 4);
  speedY = random(1, 4);
  }
//////////////////////////////////////////////////////////////////////////////

  
  
///////////////////////////////////////////////////////////////////////////////
//attacker: determines movement of the attacker
///////////////////////////////////////////////////////////////////////////////
  void attacker()
  {   
     x = x + speedX;
     y = y + speedY;
      
    //Check X Axis
    if (x > width || x < 0)
    {
      speedX *= - 1;
    }
    
    
  
    //Check Y Axis
    if (y > height || y < 0)
   {
      speedY *= - 1;
         x = (int)random(0, 200);

    } 
    
    fill(255, 151, 46);
    strokeWeight(2);
    stroke(255);
    ellipse(x, y, 10, 10); 
  }
//////////////////////////////////////////////////////////////////////////////  

  
///////////////////////////////////////////////////////////////////////////////
//RETURN X POSITION OF ATTACKER
///////////////////////////////////////////////////////////////////////////////
  float xPos()
  {
   return x;
  }
//////////////////////////////////////////////////////////////////////////////



///////////////////////////////////////////////////////////////////////////////
//RETURN Y POSITION OF ATTACKER
///////////////////////////////////////////////////////////////////////////////
  float yPos()
  {
    return y;
  }
//////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//aRad: Returns attacker radius
///////////////////////////////////////////////////////////////////////////////
  float aRad()
  {  
    return aRadi;
  }
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
//attackReport: Updates the Attacker if the Fort was successfully hit.
//////////////////////////////////////////////////////////////////////////////
void attackReport(boolean stateOfAttack, boolean deflected)
{
  aFortState = stateOfAttack;
  aDefState = deflected; // did the shield deflect the attack?
  
  if(aFortState)
  {
       speedY *= - 1;
       speedX *= - 1;  
  }
  
  if(aDefState)
  {
       speedY *= - 1;
       speedX *= - 1;  
  } 
}
//////////////////////////////////////////////////////////////////////////////


}  

