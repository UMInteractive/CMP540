class Fort
{
  int fortSize;
  int fortRadi;
  float fortColor;
   
 //SHIELD VARIABLES
  float shieldSize;
  int mouseDiam;
  float shieldRadi;
  int sRed;

  int circleDiam;
  float shieldXPos;
  float shieldYPos;
   
//////////////////////////////////////////////////////////////////////////////  
//Fort Constructor  
//////////////////////////////////////////////////////////////////////////////
  Fort()
  {
    fortColor = 0;
    fortSize = width/3;
    fortRadi = fortSize/2;
    shieldSize = width/3.5;
    mouseDiam = 30;
    shieldRadi = mouseDiam/2;
    circleDiam = fortSize + 70;
  }
//////////////////////////////////////////////////////////////////////////////

 
////////////////////////////////////////////////////////////////////////////// 
//theFort: Builds and maintains the Fort.
//////////////////////////////////////////////////////////////////////////////
  void theFort(int status)
  {
   stroke(255);
   strokeWeight(10);
   
   fill(fortColor, 0, 0);
   ellipse(width/2, height/2, fortSize, fortSize);    
  }
//////////////////////////////////////////////////////////////////////////////
 
 
 
//////////////////////////////////////////////////////////////////////////////  
//fortRad: Gives the Radius of the Fort. 
//////////////////////////////////////////////////////////////////////////////
  float fortRad()
  {
   return  fortRadi; 
  }
//////////////////////////////////////////////////////////////////////////////
  
//////////////////////////////////////////////////////////////////////////////  
//Shield Rad: Gives the Radius of the Fort. 
//////////////////////////////////////////////////////////////////////////////
  float shieldRad()
  {
   return  shieldRadi; 
  }
////////////////////////////////////////////////////////////////////////////// 


//////////////////////////////////////////////////////////////////////////////  
//fortReport: Updates the fort on whether it has been hit.
//////////////////////////////////////////////////////////////////////////////  
 void fortReport(boolean stateOfFort, boolean shieldHit)
 {
   boolean hitStatus = stateOfFort;
   boolean hitShield = shieldHit;
  
   if(hitStatus)
   {
   fortColor = 255; //If fort hit illuminate in red
   } 
   else
   {
     if(fortColor != 0) //If fort was hit Fade black from red
     {
       fortColor = fortColor - 1;
     }
   }
   if(hitShield == true)
   {
   sRed = 255;
   }
   else
   {
     if(sRed != 0)
     {
       sRed = sRed - 1;
     }
 
   }
 } //Ends fortReport
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////  
//fortShield:  Gives the position of the Fort's shield and creates it
//////////////////////////////////////////////////////////////////////////////
   void fortShield()
  {
    PVector shieldCoord = new PVector(mouseX, mouseY);
    
    PVector distance = new PVector(mouseX, mouseY);
    PVector start = new PVector(width/2, height/2);
    distance.sub(start);
    distance.limit(circleDiam/2 - mouseDiam/2);
    
    fill(sRed, 180, 0);
    strokeWeight(3);
    translate(width/2, height/2);
    ellipse(distance.x, distance.y, mouseDiam, mouseDiam); //Shield Position
    shieldXPos = shieldCoord.x;
    shieldYPos = shieldCoord.y;
    
    translate(width/2, height/2);
  }
//////////////////////////////////////////////////////////////////////////////

  
///////////////////////////////////////////////////////////////////////////////
//shieldX: Returns x position of the shield
///////////////////////////////////////////////////////////////////////////////
  float shieldX()
  {
   return shieldXPos;
  }
//////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
//shieldY: Returns y value of shield
///////////////////////////////////////////////////////////////////////////////
  float shieldY()
  {
    return shieldYPos;
  }
//////////////////////////////////////////////////////////////////////////////

}

